import tkinter as tk
import random
from datetime import datetime
import csv
import matplotlib.pyplot as plt

# Dados simulados por m√°quina
maquinas = {
    "Bomba 1": {"uso": 470, "limite": 500},
    "Motor A": {"uso": 180, "limite": 250},
    "V√°lvula Z": {"uso": 590, "limite": 600},
}

linhas = {}

# Salva eventos em CSV
def salvar_evento(nome, uso, status):
    with open("historico_manutencao.csv", "a", newline="", encoding="utf-8") as f:
        writer = csv.writer(f)
        writer.writerow([datetime.now().strftime("%Y-%m-%d %H:%M:%S"), nome, f"{uso:.1f}", status])

# Atualiza o painel em tempo real
def atualizar_uso():
    for nome, dados in maquinas.items():
        dados["uso"] += random.uniform(0.5, 1.5)
        uso = dados["uso"]
        limite = dados["limite"]

        if uso >= limite:
            status = "üî¥ Trocar"
            cor = "red"
        elif uso >= limite * 0.8:
            status = "‚ö†Ô∏è Em risco"
            cor = "orange"
        else:
            status = "‚úÖ OK"
            cor = "green"

        linhas[nome]["uso"].config(text=f"{uso:.1f} h")
        linhas[nome]["status"].config(text=status, bg=cor)

        if status != linhas[nome]["ultimo_status"]:
            salvar_evento(nome, uso, status)
            linhas[nome]["ultimo_status"] = status

    janela.after(1000, atualizar_uso)

# Bot√£o para simular troca de pe√ßa
def trocar_peca(nome):
    maquinas[nome]["uso"] = 0
    linhas[nome]["uso"].config(text="0.0 h")
    linhas[nome]["status"].config(text="‚úÖ OK", bg="green")
    salvar_evento(nome, 0, "Troca realizada")

# Mostra gr√°fico com horas de uso
def mostrar_grafico():
    nomes = list(maquinas.keys())
    usos = [dados["uso"] for dados in maquinas.values()]
    limites = [dados["limite"] for dados in maquinas.values()]

    plt.figure(figsize=(8, 4))
    plt.bar(nomes, usos, color='skyblue', label="Uso Atual (h)")
    plt.plot(nomes, limites, color='red', linestyle='--', label="Limite (h)")
    plt.ylabel("Horas")
    plt.title("Horas de Uso por M√°quina")
    plt.ylim(0, max(limites) + 50)
    plt.legend()
    plt.tight_layout()
    plt.show()

# Interface Tkinter
janela = tk.Tk()
janela.title("üõ†Ô∏è Painel de Manuten√ß√£o Inteligente")
janela.geometry("700x380")

tk.Label(janela, text="Painel de Manuten√ß√£o Preditiva", font=("Arial", 16, "bold")).pack(pady=10)

# Cabe√ßalho
cabecalho = tk.Frame(janela)
cabecalho.pack()
titulos = ["M√°quina", "Horas de Uso", "Limite", "Status", "A√ß√£o"]
for i, texto in enumerate(titulos):
    tk.Label(cabecalho, text=texto, font=("Arial", 12, "bold"), width=15).grid(row=0, column=i)

# Tabela din√¢mica
for idx, (nome, dados) in enumerate(maquinas.items(), start=1):
    frame = tk.Frame(janela)
    frame.pack()
    tk.Label(frame, text=nome, width=15).grid(row=idx, column=0)
    uso_lbl = tk.Label(frame, text=f"{dados['uso']:.1f} h", width=15)
    uso_lbl.grid(row=idx, column=1)
    tk.Label(frame, text=f"{dados['limite']} h", width=15).grid(row=idx, column=2)
    status_lbl = tk.Label(frame, text="", width=15, bg="gray")
    status_lbl.grid(row=idx, column=3)
    btn = tk.Button(frame, text="Trocar Pe√ßa", command=lambda n=nome: trocar_peca(n))
    btn.grid(row=idx, column=4)
    linhas[nome] = {
        "uso": uso_lbl,
        "status": status_lbl,
        "ultimo_status": ""
    }

# Bot√£o do gr√°fico
btn_grafico = tk.Button(janela, text="üìä Exibir Gr√°fico", command=mostrar_grafico, bg="blue", fg="white", font=("Arial", 12))
btn_grafico.pack(pady=10)

# Come√ßa atualiza√ß√£o
atualizar_uso()
janela.mainloop()
